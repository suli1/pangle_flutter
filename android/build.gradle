group 'io.github.nullptrx.pangleflutter'
version '1.3.0'

def getCurrentProjectDir() {
    String result = ""
    rootProject.allprojects { project ->

        if (project.toString().contains ("pangle_flutter")) {
            if (project.properties.get("identityPath").toString() == ":pangle_flutter") {
                // 这里是flutter的约定, 插件的module名是插件名, :是gradle的约定. project前加:
                //可能有朋友会纳闷这个本地的地址具体指向哪里，其实指向的是你插件项目存放的本地路径
                //D:\flutter\.pub-cache\git\adhub_plugin-97145c094a41ad698e72896dbe0440842b180918\android\aar
                result = project.properties.get("projectDir").toString()
            }
        }
    }
    return result
}


buildscript {
    ext.kotlin_version = '1.5.21'
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://artifact.bytedance.com/repository/pangle"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

rootProject.allprojects {
    def dir = getCurrentProjectDir()
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://artifact.bytedance.com/repository/pangle"
        }
        maven {
            url "$dir/aar"
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def kEnv = localProperties.getProperty('pangle_flutter.env')
if (kEnv == null) {
    kEnv = 'cn'
}

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.manifest.srcFile "src/main/AndroidManifest-${kEnv}.xml"
        switch (kEnv) {
            case 'cn':
                main.java.srcDirs += 'src/main/cn'
                break
        }
    }



    defaultConfig {
        minSdkVersion 16

        ndk {
            abiFilters "armeabi","armeabi-v7a", "arm64-v8a"//, "x86"
        }
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}


dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation "com.baidu:sdk:9.14.0"
    //implementation "com.unityads:sdk:3.7.5"
    implementation "com.openad:sdk:3.9.0"
    //implementation "com.klevin:sdk:2.0.0"
    //implementation "com.windad:sdk:3.3.1"
    implementation "com.gdt:sdk:4.391.1261"
    implementation 'com.google.code.gson:gson:2.8.8'
    compileOnly 'androidx.annotation:annotation:1.1.0'

    //GroMore_sdk
    implementation "com.gromore.cn:gromore-sdk:2.9.2.0"
    implementation "com.gromore.cn:gromore-test-tools:2.9.2.0"

    //GroMore_sdk adapter
    implementation "com.gromore.cn:gdt-adapter:4.391.1261.1"
    //implementation "com.gromore.cn:baidu-adapter:${BAIDU_SDK_VERSION}${BAIDU_ADAPTER_VERSION}"
    //implementation "com.gromore.cn:mintegral-adapter:${MINTEGRAL_SDK_VERSION}${MINTEGRAL_ADAPTER_VERSION}"
    //implementation "com.gromore.cn:admob-adapter:${ADMOB_SDK_VERSION}${ADMOB_ADAPTER_VERSION}"
    //implementation "com.gromore.cn:unity-adapter:${UNITY_SDK_VERSION}${UNITY_ADAPTER_VERSION}"
    //implementation "com.gromore.cn:sigmob-adapter:${SIGMOB_SDK_VERSION}${SIGMOB_ADAPTER_VERSION}"
    //implementation "com.gromore.cn:klevin-adapter:${KLEVIN_SDK_VERSION}${KLEVIN_ADAPTER_VERSION}"

//mtg
//    implementation("com.mbridge.msdk.support:videojs:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:mbjscommon:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:playercommon:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:reward:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:videocommon:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:chinasame:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:interstitialvideo:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:mbnative:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:nativeex:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:mbnativeadvanced:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:interstitial:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:mbbanner:${MINTEGRAL_SDK_VERSION}")
//    implementation("com.mbridge.msdk.support:mbsplash:${MINTEGRAL_SDK_VERSION}")
}
